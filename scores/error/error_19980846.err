Loaded dependency [python3/3.10.12]: gcc/11.4.0-binutils-2.40
Loaded dependency [python3/3.10.12]: sqlite3/3.42.0

Switching from python3/3.8.2 to python3/3.10.12
  Loading requirement: gcc/11.4.0-binutils-2.40 sqlite3/3.42.0
2024-01-29 17:22:57.744697: E tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:9342] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-01-29 17:22:57.744770: E tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.cc:609] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-01-29 17:22:57.763762: E tensorflow/compiler/xla/stream_executor/cuda/cuda_blas.cc:1518] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-01-29 17:23:57.695012: E external/xla/xla/service/slow_operation_alarm.cc:65] Constant folding an instruction is taking > 1s:

  %reduce.17 = f32[262144,4]{1,0} reduce(f32[262144,4,4]{2,1,0} %broadcast.323, f32[] %constant.97), dimensions={1}, to_apply=%region_1.968, metadata={op_name="jit(update)/jit(main)/transpose(jvp(jit(loss_fun)))/reduce_sum[axes=(1,)]" source_file="/zhome/77/8/118225/Desktop/Projects/score_diffusion_mean/score_diffusion_mean/jaxgeometry/statistics/score_matching/trainxt.py" source_line=241}

This isn't necessarily a bug; constant-folding is inherently a trade-off between compilation time and speed at runtime. XLA has some guards that attempt to keep constant folding from taking too long, but fundamentally you'll always be able to come up with an input program that takes a long time.

If you'd like to file a bug, run with envvar XLA_FLAGS=--xla_dump_to=/tmp/foo and attach the results.
2024-01-29 17:23:59.188900: E external/xla/xla/service/slow_operation_alarm.cc:133] The operation took 2.493972424s
Constant folding an instruction is taking > 1s:

  %reduce.17 = f32[262144,4]{1,0} reduce(f32[262144,4,4]{2,1,0} %broadcast.323, f32[] %constant.97), dimensions={1}, to_apply=%region_1.968, metadata={op_name="jit(update)/jit(main)/transpose(jvp(jit(loss_fun)))/reduce_sum[axes=(1,)]" source_file="/zhome/77/8/118225/Desktop/Projects/score_diffusion_mean/score_diffusion_mean/jaxgeometry/statistics/score_matching/trainxt.py" source_line=241}

This isn't necessarily a bug; constant-folding is inherently a trade-off between compilation time and speed at runtime. XLA has some guards that attempt to keep constant folding from taking too long, but fundamentally you'll always be able to come up with an input program that takes a long time.

If you'd like to file a bug, run with envvar XLA_FLAGS=--xla_dump_to=/tmp/foo and attach the results.
