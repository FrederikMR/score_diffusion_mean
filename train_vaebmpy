#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  1 18:39:50 2024

@author: fmry
"""

#%% Sources

#%% Modules

import jax.numpy as jnp
from jax import Array

from jaxgeometry.statistics.score_matching.train_vaebm import train_vaebm

from jaxgeometry.statistics.vae import model, model_decoder, score_model

from typing import NamedTuple, Iterator

import tensorflow as tf

#%% Code

class Batch(NamedTuple):
    x: Array  # [B, H, W, C]x

theta = jnp.linspace(0,2*jnp.pi,50000)
x1 = jnp.cos(theta)
x2 = jnp.sin(theta)
x3 = jnp.zeros_like(x1)

X = jnp.vstack((x1,x2,x3)).T

def load_dataset() -> Iterator[Batch]:
  ds = (
      X
      .shuffle(buffer_size=10 * 100, seed=2712)
      .batch(100)
      .prefetch(buffer_size=5)
      .repeat()
      .as_numpy_iterator()
  )
  return map(lambda x: Batch(x["x"]), ds)

#vae_datasets = load_dataset()
vae_datasets = iter(tf.data.Dataset.from_tensor_slices(X).shuffle(buffer_size=10*100,seed=2712)\
                    .batch(100)\
                        .prefetch(buffer_size=5)\
                            .repeat()\
                                .as_numpy_iterator())



train_vaebm(model, model_decoder, score_model, 
            vae_datasets, jnp.zeros(2), 1.0*jnp.ones(1), 2, 3, 100)